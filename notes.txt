Authentication

first create a user model -> in models folder and create user.model.js inside.
we also need to update the todo model to link to each user.

// when doing authentication -> add in a user model and link user to each todo by using a 
createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
}

in user model we have 2 fields, a phone number/email and password

-> we can do the hashing in the register route
we need to hash the password before saving -> need to npm i bcrypt,jsonwebtoken on node, app.js

we then go to app.js to add the register and login routes

For register: try the POST request
POST http://localhost:3100//auth/register


For login: try the POST request
POST http://localhost:3100//auth/login


-> then do the axios calls to register, login and logout








So now we need to connect the frontend to the backend (using axios calls)
->go to running folder run npm i axios
-> in App.js import axios from 'axios'
-> then add the axios calls

updated the todo model in node to match { text: "one", editing: false, edited: false }
we can then test that the  
axios
	.post("http://localhost:3100/todos/add", newTodo)
	.then((res) => console.log(res.data));
in the handlesubmit -> verify with postman that the frontend can add a new todo to the backend

we can use componentDidMount(){
axios
	.get('http://localhost:3100.todos/')
	.then(res=>{this.setState({todos: res.data})
	}).catch(function(error){
		console.log(error)
	})	
}
to load all the current todos we have stored in our database



//done add, get, update, delete
//left get one(get one not really needed in this case unless we want to show one todo on a single page)

//need to make modifications to how new todos are created as when todos are created through mongoose they are given a _.id field, which when we first create on App.js itself, this field does not appear
--> need to setState again after creating a new item